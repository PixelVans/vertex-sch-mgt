generator client {
  provider = "prisma-client-js"
  
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  username String @unique
}

model Student {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  username    String       @unique
  name        String
  surname     String
  email       String?      @unique
  phone       String?      @unique
  address     String
  img         String?
  bloodType   String
  sex         UserSex
  createdAt   DateTime     @default(now())
  parentId    String       @db.ObjectId
  parent      Parent       @relation(fields: [parentId], references: [id])
  classId     String       @db.ObjectId
  class       Class        @relation(fields: [classId], references: [id])
  gradeId     String       @db.ObjectId
  grade       Grade        @relation(fields: [gradeId], references: [id])
  attendances Attendance[]
  results     Result[]
  birthday    DateTime
}

model Teacher {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  username  String    @unique
  name      String
  surname   String
  email     String?   @unique
  phone     String?   @unique
  address   String
  img       String?
  bloodType String
  sex       UserSex
  createdAt DateTime  @default(now())
  birthday  DateTime

  // Explicit many-to-many relation with subjects
  subjects  TeacherSubject[]
  lessons   Lesson[]
  classes   Class[]
}

model Parent {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  username  String    @unique
  name      String
  surname   String
  email     String?   @unique
  phone     String    @unique
  address   String
  createdAt DateTime  @default(now())
  students  Student[]
}

model Grade {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  level Int @unique

  students Student[]
  classes  Class[]
}

model Class {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String    @unique
  capacity      Int
  supervisorId  String?   @db.ObjectId
  supervisor    Teacher?  @relation(fields: [supervisorId], references: [id])
  lessons       Lesson[]
  students      Student[]
  gradeId       String     @db.ObjectId
  grade         Grade      @relation(fields: [gradeId], references: [id])
  events        Event[]
  announcements Announcement[]

  // Explicit many-to-many relation with subjects
  subjects      ClassSubject[]
}

model Subject {
  id       String         @id @default(auto()) @map("_id") @db.ObjectId
  name     String         @unique
  lessons  Lesson[]

  // Explicit many-to-many relation with teachers
  teachers  TeacherSubject[]

  // Explicit many-to-many relation with classes
  classes   ClassSubject[]
}

model Lesson {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  day       Day
  startTime DateTime
  endTime   DateTime
  subjectId String       @db.ObjectId
  subject   Subject      @relation(fields: [subjectId], references: [id])
  classId   String       @db.ObjectId
  class     Class        @relation(fields: [classId], references: [id])
  teacherId String       @db.ObjectId
  teacher   Teacher      @relation(fields: [teacherId], references: [id])
  exams     Exam[]
  assignments Assignment[]
  attendances Attendance[]
}

model Exam {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  startTime DateTime
  endTime   DateTime
  lessonId  String      @db.ObjectId
  lesson    Lesson      @relation(fields: [lessonId], references: [id])
  results   Result[]
}

model Assignment {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  startDate DateTime
  dueDate   DateTime
  lessonId  String      @db.ObjectId
  lesson    Lesson      @relation(fields: [lessonId], references: [id])
  results   Result[]
}

model Result {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  score         Int
  examId       String?  @db.ObjectId  
  exam         Exam?      @relation(fields: [examId], references: [id])
  assignmentId String?  @db.ObjectId 
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
  studentId    String      @db.ObjectId
  student      Student     @relation(fields: [studentId], references: [id])
}


model Attendance {
  id      String      @id @default(auto()) @map("_id") @db.ObjectId
  date    DateTime
  present Boolean
  studentId String      @db.ObjectId
  student   Student     @relation(fields: [studentId], references: [id])
  lessonId  String      @db.ObjectId
  lesson    Lesson      @relation(fields: [lessonId], references: [id])
}

model Event {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  startTime   DateTime
  endTime     DateTime
  classId     String?   @db.ObjectId
  class       Class? @relation(fields: [classId], references: [id])
}

model Announcement {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  date        DateTime
  classId     String?   @db.ObjectId
  class       Class? @relation(fields: [classId], references: [id])
}

// Explicit relation models for many-to-many relationships
model TeacherSubject {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  teacherId String   @db.ObjectId
  teacher   Teacher  @relation(fields: [teacherId], references: [id])
  subjectId String   @db.ObjectId
  subject   Subject  @relation(fields: [subjectId], references: [id])
}

model ClassSubject {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  classId   String   @db.ObjectId
  class     Class    @relation(fields: [classId], references: [id])
  subjectId String   @db.ObjectId
  subject   Subject  @relation(fields: [subjectId], references: [id])
}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}
